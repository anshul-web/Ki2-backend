{"version":3,"sources":["../../src/common-middleware/index.js"],"names":["jwt","require","multer","shortid","path","storage","diskStorage","destination","req","file","cb","join","dirname","__dirname","filename","generate","originalname","exports","upload","requireSignin","res","next","headers","authorization","token","split","user","verify","process","env","JWT_SECRET","status","json","message","userMiddleware","role","adminMiddleware"],"mappings":";;AAAA,IAAMA,MAAMC,QAAQ,cAAR,CAAZ;AACA,IAAMC,SAASD,QAAQ,QAAR,CAAf;AACA,IAAME,UAAUF,QAAQ,SAAR,CAAhB;AACA,IAAMG,OAAOH,QAAQ,MAAR,CAAb;;AAEA,IAAMI,UAAUH,OAAOI,WAAP,CAAmB;AAC/BC,iBAAa,qBAAUC,GAAV,EAAeC,IAAf,EAAqBC,EAArB,EAAyB;AACpCA,WAAG,IAAH,EAASN,KAAKO,IAAL,CAAUP,KAAKQ,OAAL,CAAaC,SAAb,CAAV,EAAmC,SAAnC,CAAT;AACD,KAH8B;AAI/BC,cAAU,kBAAUN,GAAV,EAAeC,IAAf,EAAqBC,EAArB,EAAyB;AACjCA,WAAG,IAAH,EAASP,QAAQY,QAAR,KAAqB,GAArB,GAA2BN,KAAKO,YAAzC;AACD;AAN8B,CAAnB,CAAhB;;AASAC,QAAQC,MAAR,GAAiBhB,OAAO,EAAEG,gBAAF,EAAP,CAAjB;;AAEAY,QAAQE,aAAR,GAAwB,UAACX,GAAD,EAAMY,GAAN,EAAWC,IAAX,EAAoB;;AAExC,QAAGb,IAAIc,OAAJ,CAAYC,aAAf,EAA6B;AACzB,YAAMC,QAAQhB,IAAIc,OAAJ,CAAYC,aAAZ,CAA0BE,KAA1B,CAAgC,GAAhC,EAAqC,CAArC,CAAd;AACA,YAAMC,OAAO1B,IAAI2B,MAAJ,CAAWH,KAAX,EAAkBI,QAAQC,GAAR,CAAYC,UAA9B,CAAb;AACAtB,YAAIkB,IAAJ,GAAWA,IAAX;AACH,KAJD,MAIK;AACD,eAAON,IAAIW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,wBAAX,EAArB,CAAP;AACH;AACDZ;AACA;AACH,CAXD;;AAaAJ,QAAQiB,cAAR,GAAyB,UAAC1B,GAAD,EAAMY,GAAN,EAAWC,IAAX,EAAoB;AACzC,QAAGb,IAAIkB,IAAJ,CAASS,IAAT,KAAkB,MAArB,EAA4B;AACxB,eAAOf,IAAIW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,oBAAX,EAArB,CAAP;AACH;AACDZ;AACH,CALD;;AAOAJ,QAAQmB,eAAR,GAA0B,UAAC5B,GAAD,EAAMY,GAAN,EAAWC,IAAX,EAAoB;AAC1C,QAAGb,IAAIkB,IAAJ,CAASS,IAAT,KAAkB,OAArB,EAA6B;AACzB,eAAOf,IAAIW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,qBAAX,EAArB,CAAP;AACH;AACDZ;AACH,CALD","file":"index.js","sourcesContent":["const jwt = require('jsonwebtoken');\r\nconst multer = require('multer');\r\nconst shortid = require('shortid');\r\nconst path = require('path');\r\n\r\nconst storage = multer.diskStorage({\r\n    destination: function (req, file, cb) {\r\n      cb(null, path.join(path.dirname(__dirname), 'uploads'))\r\n    },\r\n    filename: function (req, file, cb) {\r\n      cb(null, shortid.generate() + '-' + file.originalname)\r\n    }\r\n})\r\n\r\nexports.upload = multer({ storage });\r\n\r\nexports.requireSignin = (req, res, next) => {\r\n\r\n    if(req.headers.authorization){\r\n        const token = req.headers.authorization.split(\" \")[1];\r\n        const user = jwt.verify(token, process.env.JWT_SECRET);\r\n        req.user = user;\r\n    }else{\r\n        return res.status(400).json({ message: 'Authorization required' });\r\n    }\r\n    next();\r\n    //jwt.decode()\r\n}\r\n\r\nexports.userMiddleware = (req, res, next) => {\r\n    if(req.user.role !== 'user'){\r\n        return res.status(400).json({ message: 'User access denied' })\r\n    }\r\n    next();\r\n}\r\n\r\nexports.adminMiddleware = (req, res, next) => {\r\n    if(req.user.role !== 'admin'){\r\n        return res.status(400).json({ message: 'Admin access denied' })\r\n    }\r\n    next();\r\n}"]}