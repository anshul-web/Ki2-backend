{"version":3,"sources":["../../src/controller/order.js"],"names":["Order","require","Cart","Address","exports","addOrder","req","res","body","user","_id","orderStatus","type","date","Date","isCompleted","order","save","error","status","json","getOrders","find","select","populate","exec","orders","getOrder","findOne","orderId","lean","address","adr","toString","addressId"],"mappings":";;AAAA,IAAMA,QAAQC,QAAQ,gBAAR,CAAd;AACA,IAAMC,OAAOD,QAAQ,eAAR,CAAb;AACA,IAAME,UAAUF,QAAQ,kBAAR,CAAhB;;AAEAG,QAAQC,QAAR,GAAmB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC/B;AACE;AACA;AACED,MAAIE,IAAJ,CAASC,IAAT,GAAgBH,IAAIG,IAAJ,CAASC,GAAzB;AACAJ,MAAIE,IAAJ,CAASG,WAAT,GAAuB,CACrB;AACEC,UAAM,SADR;AAEEC,UAAM,IAAIC,IAAJ,EAFR;AAGEC,iBAAa;AAHf,GADqB,EAMrB;AACEH,UAAM,QADR;AAEEG,iBAAa;AAFf,GANqB,EAUrB;AACEH,UAAM,SADR;AAEEG,iBAAa;AAFf,GAVqB,EAcrB;AACEH,UAAM,WADR;AAEEG,iBAAa;AAFf,GAdqB,CAAvB;AAmBA,MAAMC,QAAQ,IAAIhB,KAAJ,CAAUM,IAAIE,IAAd,CAAd;AACAQ,QAAMC,IAAN,CAAW,UAACC,KAAD,EAAQF,KAAR,EAAkB;AAC3B,QAAIE,KAAJ,EAAW,OAAOX,IAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEF,YAAF,EAArB,CAAP;AACX,QAAIF,KAAJ,EAAW;AACTT,UAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEJ,YAAF,EAArB;AACD;AACF,GALD;AAMF;AACF;AACD,CAjCD;;AAmCAZ,QAAQiB,SAAR,GAAoB,UAACf,GAAD,EAAMC,GAAN,EAAc;AAChCP,QAAMsB,IAAN,CAAW,EAAEb,MAAMH,IAAIG,IAAJ,CAASC,GAAjB,EAAX,EACGa,MADH,CACU,6DADV,EAEGC,QAFH,CAEY,iBAFZ,EAE+B,0BAF/B,EAGGC,IAHH,CAGQ,UAACP,KAAD,EAAQQ,MAAR,EAAmB;AACvB,QAAIR,KAAJ,EAAW,OAAOX,IAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEF,YAAF,EAArB,CAAP;AACX,QAAIQ,MAAJ,EAAY;AACVnB,UAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEM,cAAF,EAArB;AACD;AACF,GARH;AASD,CAVD;;AAYAtB,QAAQuB,QAAR,GAAmB,UAACrB,GAAD,EAAMC,GAAN,EAAc;AAC/BP,QAAM4B,OAAN,CAAc,EAAElB,KAAKJ,IAAIE,IAAJ,CAASqB,OAAhB,EAAd,EACGL,QADH,CACY,iBADZ,EAC+B,0BAD/B,EAEGM,IAFH,GAGGL,IAHH,CAGQ,UAACP,KAAD,EAAQF,KAAR,EAAkB;AACtB,QAAIE,KAAJ,EAAW,OAAOX,IAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEF,YAAF,EAArB,CAAP;AACX,QAAIF,KAAJ,EAAW;AACTb,cAAQyB,OAAR,CAAgB;AACdnB,cAAMH,IAAIG,IAAJ,CAASC;AADD,OAAhB,EAEGe,IAFH,CAEQ,UAACP,KAAD,EAAQa,OAAR,EAAoB;AAC1B,YAAIb,KAAJ,EAAW,OAAOX,IAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEF,YAAF,EAArB,CAAP;AACXF,cAAMe,OAAN,GAAgBA,QAAQA,OAAR,CAAgBT,IAAhB,CACd,UAACU,GAAD;AAAA,iBAASA,IAAItB,GAAJ,CAAQuB,QAAR,MAAsBjB,MAAMkB,SAAN,CAAgBD,QAAhB,EAA/B;AAAA,SADc,CAAhB;AAGA1B,YAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBJ;AADmB,SAArB;AAGD,OAVD;AAWD;AACF,GAlBH;AAmBD,CApBD","file":"order.js","sourcesContent":["const Order = require(\"../model/order\");\r\nconst Cart = require(\"../model/cart\");\r\nconst Address = require(\"../model/address\");\r\n\r\nexports.addOrder = (req, res) => {\r\n  // Cart.deleteOne({ user: req.user._id }).exec((error, result) => {\r\n    // if (error) return res.status(400).json({ error });\r\n    // if (result) {\r\n      req.body.user = req.user._id;\r\n      req.body.orderStatus = [\r\n        {\r\n          type: \"ordered\",\r\n          date: new Date(),\r\n          isCompleted: true,\r\n        },\r\n        {\r\n          type: \"packed\",\r\n          isCompleted: false,\r\n        },\r\n        {\r\n          type: \"shipped\",\r\n          isCompleted: false,\r\n        },\r\n        {\r\n          type: \"delivered\",\r\n          isCompleted: false,\r\n        },\r\n      ];\r\n      const order = new Order(req.body);\r\n      order.save((error, order) => {\r\n        if (error) return res.status(400).json({ error });\r\n        if (order) {\r\n          res.status(201).json({ order });\r\n        }\r\n      });\r\n    // }\r\n  // });\r\n};\r\n\r\nexports.getOrders = (req, res) => {\r\n  Order.find({ user: req.user._id })\r\n    .select(\"_id totalAmount paymentStatus paymentType orderStatus items\")\r\n    .populate(\"items.productId\", \"_id name productPictures\")\r\n    .exec((error, orders) => {\r\n      if (error) return res.status(400).json({ error });\r\n      if (orders) {\r\n        res.status(200).json({ orders });\r\n      }\r\n    });\r\n};\r\n\r\nexports.getOrder = (req, res) => {\r\n  Order.findOne({ _id: req.body.orderId })\r\n    .populate(\"items.productId\", \"_id name productPictures\")\r\n    .lean()\r\n    .exec((error, order) => {\r\n      if (error) return res.status(400).json({ error });\r\n      if (order) {\r\n        Address.findOne({\r\n          user: req.user._id,\r\n        }).exec((error, address) => {\r\n          if (error) return res.status(400).json({ error });\r\n          order.address = address.address.find(\r\n            (adr) => adr._id.toString() == order.addressId.toString()\r\n          );\r\n          res.status(200).json({\r\n            order,\r\n          });\r\n        });\r\n      }\r\n    });\r\n};\r\n\r\n\r\n"]}