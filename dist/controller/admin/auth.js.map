{"version":3,"sources":["../../../src/controller/admin/auth.js"],"names":["User","require","jwt","bcrypt","shortid","exports","signup","req","res","findOne","email","body","exec","error","user","status","json","message","firstName","lastName","password","hash","hash_password","_user","username","generate","role","save","data","signin","authenticate","isPassword","token","sign","_id","process","env","JWT_SECRET","expiresIn","fullName","cookie","signout","clearCookie"],"mappings":";;;;AAAA,IAAMA,OAAOC,QAAQ,kBAAR,CAAb;AACA,IAAMC,MAAMD,QAAQ,cAAR,CAAZ;AACA,IAAME,SAASF,QAAQ,QAAR,CAAf;AACA,IAAMG,UAAUH,QAAQ,SAAR,CAAhB;;AAEAI,QAAQC,MAAR,GAAiB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC3BR,SAAKS,OAAL,CAAa,EAAEC,OAAOH,IAAII,IAAJ,CAASD,KAAlB,EAAb,EACCE,IADD;AAAA,2EACM,iBAAOC,KAAP,EAAcC,IAAd;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,iCACCA,IADD;AAAA;AAAA;AAAA;;AAAA,6DACcN,IAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjCC,yCAAS;AADwB,6BAArB,CADd;;AAAA;AAAA,wCAUEV,IAAII,IAVN,EAMEO,SANF,aAMEA,SANF,EAOEC,QAPF,aAOEA,QAPF,EAQET,KARF,aAQEA,KARF,EASEU,QATF,aASEA,QATF;AAAA;AAAA,mCAW0BjB,OAAOkB,IAAP,CAAYD,QAAZ,EAAsB,EAAtB,CAX1B;;AAAA;AAWIE,yCAXJ;AAYIC,iCAZJ,GAYY,IAAIvB,IAAJ,CAAS;AACnBkB,oDADmB;AAEnBC,kDAFmB;AAGnBT,4CAHmB;AAInBY,4DAJmB;AAKnBE,0CAAUpB,QAAQqB,QAAR,EALS;AAMnBC,sCAAM;AANa,6BAAT,CAZZ;;;AAqBFH,kCAAMI,IAAN,CAAW,UAACd,KAAD,EAAQe,IAAR,EAAiB;AACxB,oCAAGf,KAAH,EAAS;AACL,2CAAOL,IAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,iDAAS;AADe,qCAArB,CAAP;AAGH;;AAED,oCAAGW,IAAH,EAAQ;AACJ,2CAAOpB,IAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,iDAAS;AADe,qCAArB,CAAP;AAGH;AACJ,6BAZD;;AArBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADN;;AAAA;AAAA;AAAA;AAAA;AAuCH,CAxCD;;AA0CAZ,QAAQwB,MAAR,GAAiB,UAACtB,GAAD,EAAMC,GAAN,EAAc;AAC3BR,SAAKS,OAAL,CAAa,EAAEC,OAAOH,IAAII,IAAJ,CAASD,KAAlB,EAAb,EACCE,IADD;AAAA,4EACM,kBAAOC,KAAP,EAAcC,IAAd;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,iCACCD,KADD;AAAA;AAAA;AAAA;;AAAA,8DACeL,IAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEH,YAAF,EAArB,CADf;;AAAA;AAAA,iCAECC,IAFD;AAAA;AAAA;AAAA;;AAAA;AAAA,mCAI2BA,KAAKgB,YAAL,CAAkBvB,IAAII,IAAJ,CAASS,QAA3B,CAJ3B;;AAAA;AAIQW,sCAJR;;AAAA,kCAMKA,cAAcjB,KAAKY,IAAL,KAAc,OANjC;AAAA;AAAA;AAAA;;AAOYM,iCAPZ,GAOoB9B,IAAI+B,IAAJ,CAAS,EAACC,KAAKpB,KAAKoB,GAAX,EAAgBR,MAAMZ,KAAKY,IAA3B,EAAT,EAA2CS,QAAQC,GAAR,CAAYC,UAAvD,EAAmE,EAAEC,WAAW,IAAb,EAAnE,CAPpB;AAQcJ,+BARd,GAQkEpB,IARlE,CAQcoB,GARd,EAQmBhB,SARnB,GAQkEJ,IARlE,CAQmBI,SARnB,EAQ8BC,QAR9B,GAQkEL,IARlE,CAQ8BK,QAR9B,EAQwCT,KARxC,GAQkEI,IARlE,CAQwCJ,KARxC,EAQ+CgB,IAR/C,GAQkEZ,IARlE,CAQ+CY,IAR/C,EAQqDa,QARrD,GAQkEzB,IARlE,CAQqDyB,QARrD;;AASM/B,gCAAIgC,MAAJ,CAAW,OAAX,EAAoBR,KAApB,EAA2B,EAAEM,WAAW,IAAb,EAA3B;AACA9B,gCAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBgB,4CADiB;AAEjBlB,sCAAM,EAACoB,QAAD,EAAMhB,oBAAN,EAAiBC,kBAAjB,EAA2BT,YAA3B,EAAkCgB,UAAlC,EAAwCa,kBAAxC;AAFW,6BAArB;AAVN;AAAA;;AAAA;AAAA,8DAea/B,IAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,yCAAS;AADe,6BAArB,CAfb;;AAAA;AAAA;AAAA;;AAAA;AAAA,8DAqBST,IAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,SAAS,sBAAV,EAArB,CArBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADN;;AAAA;AAAA;AAAA;AAAA;AAyBH,CA1BD;;AA4BAZ,QAAQoC,OAAR,GAAkB,UAAClC,GAAD,EAAKC,GAAL,EAAa;AAC3BA,QAAIkC,WAAJ,CAAgB,OAAhB;AACAlC,QAAIO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,iBAAS;AADQ,KAArB;AAGH,CALD","file":"auth.js","sourcesContent":["const User = require('../../model/user');\r\nconst jwt = require('jsonwebtoken');\r\nconst bcrypt = require('bcrypt');\r\nconst shortid = require('shortid');\r\n\r\nexports.signup = (req, res) => {\r\n    User.findOne({ email: req.body.email })\r\n    .exec(async (error, user) => {\r\n        if(user) return res.status(400).json({\r\n            message: 'Admin already registered'\r\n        });\r\n\r\n        const {\r\n            firstName,\r\n            lastName,\r\n            email,\r\n            password\r\n        } = req.body;\r\n        const hash_password = await bcrypt.hash(password, 10);\r\n        const _user = new User({ \r\n            firstName, \r\n            lastName, \r\n            email, \r\n            hash_password,\r\n            username: shortid.generate(),\r\n            role: 'admin'\r\n        });\r\n\r\n        _user.save((error, data) => {\r\n            if(error){\r\n                return res.status(400).json({\r\n                    message: 'Something went wrong'\r\n                });\r\n            }\r\n\r\n            if(data){\r\n                return res.status(201).json({\r\n                    message: 'Admin created Successfully..!'\r\n                })\r\n            }\r\n        });\r\n\r\n\r\n\r\n    });\r\n}\r\n\r\nexports.signin = (req, res) => {\r\n    User.findOne({ email: req.body.email })\r\n    .exec(async (error, user) => {\r\n        if(error) return res.status(400).json({ error });\r\n        if(user){\r\n            \r\n            const isPassword = await user.authenticate(req.body.password);\r\n\r\n            if(isPassword && user.role === 'admin'){\r\n                const token = jwt.sign({_id: user._id, role: user.role}, process.env.JWT_SECRET, { expiresIn: '1d' });\r\n                const { _id, firstName, lastName, email, role, fullName } = user;\r\n                res.cookie('token', token, { expiresIn: '1d' });\r\n                res.status(200).json({\r\n                    token,\r\n                    user: {_id, firstName, lastName, email, role, fullName}\r\n                });\r\n            }else{\r\n                return res.status(400).json({\r\n                    message: 'Invalid Password'\r\n                })\r\n            }\r\n\r\n        }else{\r\n            return res.status(400).json({message: 'Something went wrong'});\r\n        }\r\n    });\r\n}\r\n\r\nexports.signout = (req,res) => {\r\n    res.clearCookie('token');\r\n    res.status(200).json({\r\n        message: 'Signout successfully...!'\r\n    })\r\n}"]}