{"version":3,"sources":["../../../src/controller/admin/initialData.js"],"names":["Category","require","Product","Order","createCategories","categories","parentId","categoryList","category","filter","cat","undefined","cate","push","_id","name","slug","children","exports","initialData","req","res","find","exec","select","populate","path","products","orders","status","json"],"mappings":";;;;AAAA,IAAMA,WAAWC,QAAQ,sBAAR,CAAjB;AACA,IAAMC,UAAUD,QAAQ,qBAAR,CAAhB;AACA,IAAME,QAAQF,QAAQ,mBAAR,CAAd;;AAEAG;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA,EAAmB,UAACC,UAAD,EAAiC;AAAA,QAApBC,QAAoB,uEAAT,IAAS;;AAChD,QAAMC,eAAe,EAArB;AACA,QAAIC,iBAAJ;AACA,QAAGF,YAAY,IAAf,EAAoB;AAChBE,mBAAWH,WAAWI,MAAX,CAAkB;AAAA,mBAAOC,IAAIJ,QAAJ,IAAgBK,SAAvB;AAAA,SAAlB,CAAX;AACH,KAFD,MAEO;AACHH,mBAAWH,WAAWI,MAAX,CAAkB;AAAA,mBAAOC,IAAIJ,QAAJ,IAAgBA,QAAvB;AAAA,SAAlB,CAAX;AACH;;AAP+C;AAAA;AAAA;;AAAA;AAShD,6BAAgBE,QAAhB,8HAA0B;AAAA,gBAAlBI,IAAkB;;AACtBL,yBAAaM,IAAb,CAAkB;AACdC,qBAAKF,KAAKE,GADI;AAEdC,sBAAMH,KAAKG,IAFG;AAGdC,sBAAMJ,KAAKI,IAHG;AAIdV,0BAAUM,KAAKN,QAJD;AAKdW,0BAAUb,iBAAiBC,UAAjB,EAA6BO,KAAKE,GAAlC;AALI,aAAlB;AAOH;AAjB+C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAmBhD,WAAOP,YAAP;AACH,CApBD;;AAuBAW,QAAQC,WAAR;AAAA,uEAAsB,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEOrB,SAASsB,IAAT,CAAc,EAAd,EAAkBC,IAAlB,EAFP;;AAAA;AAEZlB,kCAFY;AAAA;AAAA,+BAGKH,QAAQoB,IAAR,CAAa,EAAb,EAClBE,MADkB,CACX,mFADW,EAElBC,QAFkB,CAET,EAAEC,MAAM,UAAR,EAAoBF,QAAQ,iCAA5B,EAFS,EAGlBD,IAHkB,EAHL;;AAAA;AAGZI,gCAHY;AAAA;AAAA,+BAOGxB,MAAMmB,IAAN,CAAW,EAAX,EAChBG,QADgB,CACP,iBADO,EACY,MADZ,EAEhBF,IAFgB,EAPH;;AAAA;AAOZK,8BAPY;;AAUdP,4BAAIQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBzB,wCAAYD,iBAAiBC,UAAjB,CADK;AAEjBsB,8CAFiB;AAGjBC;AAHiB,yBAArB;;AAVc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAtB;;AAAA;AAAA;AAAA;AAAA","file":"initialData.js","sourcesContent":["const Category = require('../../model/category');\r\nconst Product = require('../../model/product');\r\nconst Order = require('../../model/order');\r\n\r\ncreateCategories = (categories, parentId = null) => {\r\n    const categoryList = [];\r\n    let category;\r\n    if(parentId == null){\r\n        category = categories.filter(cat => cat.parentId == undefined);\r\n    } else {\r\n        category = categories.filter(cat => cat.parentId == parentId)\r\n    }\r\n\r\n    for(let cate of category) {\r\n        categoryList.push({\r\n            _id: cate._id,\r\n            name: cate.name,\r\n            slug: cate.slug,\r\n            parentId: cate.parentId,\r\n            children: createCategories(categories, cate._id)\r\n        });\r\n    }\r\n\r\n    return categoryList;\r\n}\r\n\r\n\r\nexports.initialData = async (req, res) => {\r\n\r\n    const categories = await Category.find({}).exec();\r\n    const products = await Product.find({})\r\n        .select('_id name price productCategory quantity slug description productPictures category')\r\n        .populate({ path: 'category', select: '_id name categoryImage children' })\r\n        .exec();\r\n    const orders = await Order.find({})\r\n        .populate(\"items.productId\", \"name\")\r\n        .exec();\r\n        res.status(200).json({\r\n            categories: createCategories(categories),\r\n            products,\r\n            orders,\r\n        });\r\n\r\n};"]}