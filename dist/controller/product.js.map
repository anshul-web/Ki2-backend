{"version":3,"sources":["../../src/controller/product.js"],"names":["Product","require","shortid","slugify","Category","category","exports","createProduct","req","res","body","name","price","productCategory","description","quantity","createdBy","productPictures","files","length","map","img","file","filename","product","slug","user","_id","save","error","status","json","getAllProduct","products","productList","push","getProductsBySlug","params","findOne","select","exec","find","parentId","categories","subCategories","message","getProductDetailsById","getProducts","or"],"mappings":"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","file":"product.js","sourcesContent":["const Product = require('../model/product');\r\nconst shortid = require('shortid');\r\nconst slugify = require('slugify');\r\nconst Category = require('../model/category');\r\nconst category = require('../model/category');\r\n\r\n\r\nexports.createProduct = (req, res) => {\r\n\r\n    //res.status(200).json( { file: req.files, body: req.body } );\r\n\r\n    const {\r\n        name, price, productCategory, description, category, quantity, createdBy\r\n    } = req.body;\r\n    let productPictures = [];\r\n\r\n    if(req.files.length > 0){\r\n        productPictures = req.files.map(file => {\r\n            return { img: file.filename }\r\n        });\r\n    }\r\n\r\n    const product = new Product({\r\n        name: name,\r\n        slug: slugify(name),\r\n        price,\r\n        productCategory,\r\n        quantity,\r\n        description,\r\n        productPictures,\r\n        category,\r\n        createdBy: req.user._id\r\n    });\r\n\r\n    product.save(((error, product) => {\r\n        if(error) return res.status(400).json({ error });\r\n        if(product){\r\n            res.status(201).json({ product });\r\n        }\r\n    }));\r\n\r\n\r\n};\r\n\r\n\r\ngetAllProduct = (products) => {\r\n    const productList = [];\r\n    \r\n    for(let product of products){\r\n        productList.push({\r\n            _id: product._id,\r\n            name: product.name,\r\n            slug: product.slug,\r\n            price: product.price,\r\n            productCategory: product.productCategory,\r\n            quantity: product.quantity,\r\n            description: product.description,\r\n            productPictures: product.productPictures\r\n        });\r\n    }\r\n    return productList;\r\n}\r\n\r\nexports.getProductsBySlug = (req, res) => {\r\n    const { slug } = req.params;\r\n    Category.findOne({ slug: slug})\r\n    .select(\"_id name\")\r\n    .exec((error, category) => {\r\n        if(error){\r\n            return res.status(400).json({error});\r\n\r\n        }\r\n        if(category){\r\n            Category.find({ parentId: category._id })\r\n            .select(\"_id name\")\r\n            .exec((error, categories) => {\r\n                subCategories = categories;\r\n\r\n            Product.find({ category: category._id })\r\n            .exec((error, products) => {\r\n                if(error){\r\n                    res.status(400).json({error});\r\n                }\r\n                if(products.length > 0){\r\n                    res.status(200).json({\r\n                        products,\r\n                        subCategories\r\n                    });\r\n                }else{\r\n                    res.status(200).json({\r\n                        message: \"No productsfor this Category\"\r\n                    })\r\n                }\r\n                \r\n            })\r\n            })\r\n            \r\n        }\r\n        \r\n    });\r\n    \r\n}\r\n\r\nexports.getProductDetailsById = (req, res) => {\r\n    const { category } = req.params;\r\n    res.status(200).json({category});\r\n\r\n    // if(productId){\r\n    //     Product.findOne({ _id: productId })\r\n    //     .exec((error, product) => {\r\n    //         if(error) return res.status(400).json({ error });\r\n    //         if(product){\r\n    //             res.status(200).json({ product });\r\n    //         }\r\n    //     });\r\n    // }else{\r\n    //     return res.status(400).json({ error: 'Params required' });\r\n    // }\r\n}\r\n\r\nexports.getProducts = (req,res) => {\r\n    Product.find({})\r\n    .exec((error, products) => {\r\n        if(or) return res.status(400).json({error})\r\n\r\n        if(products) {\r\n            const productList = getAllProduct(products);\r\n            res.status(200).json( {productList });\r\n            \r\n        }\r\n    });\r\n}"]}