{"version":3,"sources":["../../src/controller/cart.js"],"names":["Cart","require","runUpdate","condition","updateData","Promise","resolve","reject","findOneAndUpdate","upsert","then","result","catch","err","exports","addItemToCart","req","res","findOne","user","_id","exec","error","cart","status","json","promiseArray","body","cartItems","forEach","cartItem","product","item","find","c","update","$set","$push","push","all","response","save","getCartItems","populate","index","toString","name","img","productPictures","price","quantity","qty","removeCartItems","productId","payload","$pull"],"mappings":"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","file":"cart.js","sourcesContent":["const Cart = require(\"../model/cart\");\r\n\r\nfunction runUpdate(condition, updateData) {\r\n  return new Promise((resolve, reject) => {\r\n    //you update code here\r\n\r\n    Cart.findOneAndUpdate(condition, updateData, { upsert: true })\r\n      .then((result) => resolve())\r\n      .catch((err) => reject(err));\r\n  });\r\n}\r\n\r\nexports.addItemToCart = (req, res) => {\r\n  Cart.findOne({ user: req.user._id }).exec((error, cart) => {\r\n    if (error) return res.status(400).json({ error });\r\n    if (cart) {\r\n      //if cart already exists then update cart by quantity\r\n      let promiseArray = [];\r\n\r\n      req.body.cartItems.forEach((cartItem) => {\r\n        const product = cartItem.product;\r\n        const item = cart.cartItems.find((c) => c.product == product);\r\n        let condition, update;\r\n        if (item) {\r\n          condition = { user: req.user._id, \"cartItems.product\": product };\r\n          update = {\r\n            $set: {\r\n              \"cartItems.$\": cartItem,\r\n            },\r\n          };\r\n        } else {\r\n          condition = { user: req.user._id };\r\n          update = {\r\n            $push: {\r\n              cartItems: cartItem,\r\n            },\r\n          };\r\n        }\r\n        promiseArray.push(runUpdate(condition, update));\r\n        //Cart.findOneAndUpdate(condition, update, { new: true }).exec();\r\n        // .exec((error, _cart) => {\r\n        //     if(error) return res.status(400).json({ error });\r\n        //     if(_cart){\r\n        //         //return res.status(201).json({ cart: _cart });\r\n        //         updateCount++;\r\n        //     }\r\n        // })\r\n      });\r\n      Promise.all(promiseArray)\r\n        .then((response) => res.status(201).json({ response }))\r\n        .catch((error) => res.status(400).json({ error }));\r\n    } else {\r\n      //if cart not exist then create a new cart\r\n      const cart = new Cart({\r\n        user: req.user._id,\r\n        cartItems: req.body.cartItems,\r\n      });\r\n      cart.save((error, cart) => {\r\n        if (error) return res.status(400).json({ error });\r\n        if (cart) {\r\n          return res.status(201).json({ cart });\r\n        }\r\n      });\r\n    }\r\n  });\r\n};\r\n\r\n// exports.addToCart = (req, res) => {\r\n//     const { cartItems } = req.body;\r\n//     if(cartItems){\r\n//        if(Object.keys(cartItems).length > 0){\r\n//            Cart.findOneAndUpdate({\r\n//                \"user\": req.user._id\r\n//            }, {\r\n//                \"cartItems\": cartItems\r\n//            }, {\r\n//                 upsert: true, new: true, setDefaultsOnInsert: true\r\n//            }, (error, cartItems) => {\r\n//                if(error) return res.status(400).json({ error });\r\n//                if(cartItems) res.status(201).json({ message: 'Added Successfully' });\r\n//            })\r\n//        }\r\n//        //res.status(201).json({ cartItems });\r\n//     }else{\r\n//         //res.status(201).json({ req });\r\n//     }\r\n// }\r\n\r\nexports.getCartItems = (req, res) => {\r\n  //const { user } = req.body.payload;\r\n  //if(user){\r\n  Cart.findOne({ user: req.user._id })\r\n    .populate(\"cartItems.product\", \"_id name price quantity productPictures\")\r\n    .exec((error, cart) => {\r\n      if (error) return res.status(400).json({ error });\r\n      if (cart) {\r\n        let cartItems = {};\r\n        cart.cartItems.forEach((item, index) => {\r\n          cartItems[item.product._id.toString()] = {\r\n            _id: item.product._id.toString(),\r\n            name: item.product.name,\r\n            img: item.product.productPictures[0].img,\r\n            price: item.product.price,\r\n            quantity: item.product.quantity,\r\n            qty: item.quantity,\r\n          };\r\n        });\r\n        res.status(200).json({ cartItems });\r\n      }\r\n    });\r\n  //}\r\n};\r\n\r\n// new update remove cart items\r\nexports.removeCartItems = (req, res) => {\r\n  const { productId } = req.body.payload;\r\n  if (productId) {\r\n    Cart.update(\r\n      { user: req.user._id },\r\n      {\r\n        $pull: {\r\n          cartItems: {\r\n            product: productId,\r\n          },\r\n        },\r\n      }\r\n    ).exec((error, result) => {\r\n      if (error) return res.status(400).json({ error });\r\n      if (result) {\r\n        res.status(202).json({ result });\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\n"]}