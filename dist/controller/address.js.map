{"version":3,"sources":["../../src/controller/address.js"],"names":["address","require","UserAddress","exports","addAddress","req","res","payload","body","_id","findOneAndUpdate","user","$set","exec","error","status","json","$push","new","upsert","getAddress","findOne","userAddress"],"mappings":";;AAAA,IAAMA,UAAUC,QAAQ,kBAAR,CAAhB;AACA,IAAMC,cAAcD,QAAQ,kBAAR,CAApB;;AAEAE,QAAQC,UAAR,GAAqB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjC;AADiC,MAEzBC,OAFyB,GAEbF,IAAIG,IAFS,CAEzBD,OAFyB;;AAGjC,MAAIA,QAAQP,OAAZ,EAAqB;AACnB,QAAIO,QAAQP,OAAR,CAAgBS,GAApB,EAAyB;AACvBP,kBAAYQ,gBAAZ,CACE,EAAEC,MAAMN,IAAIM,IAAJ,CAASF,GAAjB,EAAsB,eAAeF,QAAQP,OAAR,CAAgBS,GAArD,EADF,EAEE;AACEG,cAAM;AACJ,uBAAaL,QAAQP;AADjB;AADR,OAFF,EAOEa,IAPF,CAOO,UAACC,KAAD,EAAQd,OAAR,EAAoB;AACzB,YAAIc,KAAJ,EAAW,OAAOR,IAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEF,YAAF,EAArB,CAAP;AACX,YAAId,OAAJ,EAAa;AACXM,cAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEhB,gBAAF,EAArB;AACD;AACF,OAZD;AAaD,KAdD,MAcO;AACLE,kBAAYQ,gBAAZ,CACE,EAAEC,MAAMN,IAAIM,IAAJ,CAASF,GAAjB,EADF,EAEE;AACEQ,eAAO;AACLjB,mBAASO,QAAQP;AADZ;AADT,OAFF,EAOE,EAAEkB,KAAK,IAAP,EAAaC,QAAQ,IAArB,EAPF,EAQEN,IARF,CAQO,UAACC,KAAD,EAAQd,OAAR,EAAoB;AACzB,YAAIc,KAAJ,EAAW,OAAOR,IAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEF,YAAF,EAArB,CAAP;AACX,YAAId,OAAJ,EAAa;AACXM,cAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEhB,gBAAF,EAArB;AACD;AACF,OAbD;AAcD;AACF,GA/BD,MA+BO;AACLM,QAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEF,OAAO,yBAAT,EAArB;AACD;AACF,CArCD;;AAuCAX,QAAQiB,UAAR,GAAqB,UAACf,GAAD,EAAMC,GAAN,EAAc;AACjCJ,cAAYmB,OAAZ,CAAoB,EAAEV,MAAMN,IAAIM,IAAJ,CAASF,GAAjB,EAApB,EAA4CI,IAA5C,CAAiD,UAACC,KAAD,EAAQQ,WAAR,EAAwB;AACvE,QAAIR,KAAJ,EAAW,OAAOR,IAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEF,YAAF,EAArB,CAAP;AACX,QAAIQ,WAAJ,EAAiB;AACfhB,UAAIS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEM,wBAAF,EAArB;AACD;AACF,GALD;AAMD,CAPD","file":"address.js","sourcesContent":["const address = require(\"../model/address\");\r\nconst UserAddress = require(\"../model/address\");\r\n\r\nexports.addAddress = (req, res) => {\r\n  //return res.status(200).json({body: req.body})\r\n  const { payload } = req.body;\r\n  if (payload.address) {\r\n    if (payload.address._id) {\r\n      UserAddress.findOneAndUpdate(\r\n        { user: req.user._id, \"address._id\": payload.address._id },\r\n        {\r\n          $set: {\r\n            \"address.$\": payload.address,\r\n          },\r\n        }\r\n      ).exec((error, address) => {\r\n        if (error) return res.status(400).json({ error });\r\n        if (address) {\r\n          res.status(201).json({ address });\r\n        }\r\n      });\r\n    } else {\r\n      UserAddress.findOneAndUpdate(\r\n        { user: req.user._id },\r\n        {\r\n          $push: {\r\n            address: payload.address,\r\n          },\r\n        },\r\n        { new: true, upsert: true }\r\n      ).exec((error, address) => {\r\n        if (error) return res.status(400).json({ error });\r\n        if (address) {\r\n          res.status(201).json({ address });\r\n        }\r\n      });\r\n    }\r\n  } else {\r\n    res.status(400).json({ error: \"Params address required\" });\r\n  }\r\n};\r\n\r\nexports.getAddress = (req, res) => {\r\n  UserAddress.findOne({ user: req.user._id }).exec((error, userAddress) => {\r\n    if (error) return res.status(400).json({ error });\r\n    if (userAddress) {\r\n      res.status(200).json({ userAddress });\r\n    }\r\n  });\r\n};\r\n"]}