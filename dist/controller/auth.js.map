{"version":3,"sources":["../../src/controller/auth.js"],"names":["User","require","jwt","bcrypt","shortid","generateJwtToken","_id","role","sign","process","env","JWT_SECRET","expiresIn","exports","signup","req","res","findOne","email","body","exec","error","user","status","json","firstName","lastName","password","hash","hash_password","_user","username","generate","save","token","fullName","signin","authenticate","isPassword"],"mappings":"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","file":"auth.js","sourcesContent":["const User = require(\"../model/user\");\r\nconst jwt = require(\"jsonwebtoken\");\r\nconst bcrypt = require(\"bcrypt\");\r\nconst shortid = require(\"shortid\");\r\n\r\nconst generateJwtToken = (_id, role) => {\r\n  return jwt.sign({ _id, role }, process.env.JWT_SECRET, {\r\n    expiresIn: \"365d\",\r\n  });\r\n};\r\n\r\nexports.signup = (req, res) => {\r\n  User.findOne({ email: req.body.email }).exec(async (error, user) => {\r\n    if (user)\r\n      return res.status(400).json({\r\n        error: \"User is-- already registered\",\r\n      });\r\n\r\n    const { firstName, lastName, email, password } = req.body;\r\n    const hash_password = await bcrypt.hash(password, 10);\r\n    const _user = new User({\r\n      firstName,\r\n      lastName,\r\n      email,\r\n      hash_password,\r\n      username: shortid.generate(),\r\n    });\r\n\r\n    _user.save((error, user) => {\r\n      if (error) {\r\n        return res.status(400).json({\r\n          error: \"Something-- went wrong\",\r\n        });\r\n      }\r\n\r\n      if (user) {\r\n        const token = generateJwtToken(user._id, user.role);\r\n        const { _id, firstName, lastName, email, role, fullName } = user;\r\n        return res.status(201).json({\r\n          token,\r\n          user: { _id, firstName, lastName, email, role, fullName },\r\n        });\r\n      }\r\n    });\r\n  });\r\n};\r\n\r\nexports.signin = (req, res) => {\r\n  User.findOne({ email: req.body.email }).exec(async (error, user) => {\r\n    if (error) return res.status(400).json({ error });\r\n    if (user) {\r\n      const isPassword = await user.authenticate(req.body.password);\r\n      if (isPassword && user.role === \"user\") {\r\n        // const token = jwt.sign(\r\n        //   { _id: user._id, role: user.role },\r\n        //   process.env.JWT_SECRET,\r\n        //   { expiresIn: \"1d\" }\r\n        // );\r\n        const token = generateJwtToken(user._id, user.role);\r\n        const { _id, firstName, lastName, email, role, fullName } = user;\r\n        res.status(200).json({\r\n          token,\r\n          user: { _id, firstName, lastName, email, role, fullName },\r\n        });\r\n      } else {\r\n        return res.status(400).json({\r\n          error: \"Something went wrong\",\r\n        });\r\n      }\r\n    } else {\r\n      return res.status(400).json({ error: \"Something went wrong\" });\r\n    }\r\n  });\r\n};\r\n"]}